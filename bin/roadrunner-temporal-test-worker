#!/usr/bin/env php
<?php
declare(strict_types=1);

use Keepsuit\LaravelTemporal\Support\ApplicationFactory;
use Keepsuit\LaravelTemporal\TemporalDiscovery;
use Keepsuit\LaravelTemporal\Testing\Internal\RoadRunnerActivityInvocationCache;
use Keepsuit\LaravelTemporal\Testing\Internal\WorkerFactory;
use Temporal\DataConverter\DataConverterInterface;
use Temporal\Worker\Transport\Goridge;

$basePath = require __DIR__.'/bootstrap.php';

$app = (new ApplicationFactory($basePath))->createApplication();

/** @var TemporalDiscovery $discovery */
$discovery = $app->make(TemporalDiscovery::class);

$dataConverter = $app->make(DataConverterInterface::class);

// factory initiates and runs task queue specific activity and workflow workers
$factory = WorkerFactory::create(
    dataConverter: $dataConverter,
    rpc: Goridge::create(),
    activityCache: RoadRunnerActivityInvocationCache::create(dataConverter: $dataConverter)
);

// Worker that listens on a Task Queue and hosts both workflow and activity implementations.
$mainWorker = $factory->newWorker(
    taskQueue: env('TEMPORAL_QUEUE')
);

$additionalWorkers = array_map(
    fn($additionalQueue) => $factory->newWorker(taskQueue: $additionalQueue),
    $app->make('config')->get('temporal.testing.queues', [])
);

foreach ($discovery->getWorkflows() as $workflow) {
    $mainWorker->registerWorkflowTypes($workflow);

    foreach ($additionalWorkers as $worker) {
        $worker->registerWorkflowTypes($workflow);
    }
}

foreach ($discovery->getActivities() as $activity) {
    $mainWorker->registerActivity($activity, fn (ReflectionClass $class) => $app->make($class->getName()));

    foreach ($additionalWorkers as $worker) {
        $worker->registerActivity($activity);
    }
}

$factory->run();