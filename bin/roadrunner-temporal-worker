#!/usr/bin/env php
<?php
declare(strict_types=1);

use Keepsuit\LaravelTemporal\Support\ApplicationFactory;
use Keepsuit\LaravelTemporal\TemporalDiscovery;
use Spiral\Goridge\Exception\RelayException;
use Temporal\DataConverter\DataConverterInterface;
use Temporal\WorkerFactory;

$basePath = require __DIR__.'/bootstrap.php';

$app = (new ApplicationFactory($basePath))->createApplication();

if ($app->environment() !== 'production' && env('TEMPORAL_TESTING_ENV')) {
    \Keepsuit\LaravelTemporal\Facade\Temporal::initFakeWorker();
}

/** @var TemporalDiscovery $discovery */
$discovery = $app->make(TemporalDiscovery::class);

// factory initiates and runs task queue specific activity and workflow workers
$factory = WorkerFactory::create(
    converter: $app->make(DataConverterInterface::class)
);

// Worker that listens on a Task Queue and hosts both workflow and activity implementations.
$worker = $factory->newWorker(
    taskQueue: env('TEMPORAL_QUEUE'),
);

foreach ($discovery->getWorkflows() as $workflow) {
    $worker->registerWorkflowTypes($workflow);
}

foreach ($discovery->getActivities() as $activity) {
    $worker->registerActivity($activity, fn (ReflectionClass $class) => $app->make($class->getName()));
}

try {
    $factory->run();
} catch (RelayException $e) {
    exit(1);
}
